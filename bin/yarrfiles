#!/bin/sh

# set the directory of Yarrfiles.
YARRF=`echo /Users/$(whoami)/.yarrfiles`

# get the current working directory so we can switch back if nessecary.
CWD=`pwd`

# Flag to determine what type of install were performing.
RAW='0'

VERBOSE='0'

# Force a command to run.
FORCE='0'

CURRENT_SHELL=`basename $SHELL`
CURRENT_SHELL_SUFFIX='rc'
CURRENT_SHELL_CONFIG="${CURRENT_SHELL}${CURRENT_SHELL_SUFFIX}"

# Default command to run.
COMMAND='usage'

usage()
{
	cat <<USAGE
Usage: yarrfiles options

Sail'n wit me booty across the seven seas.. Arr! Prepare to be Boarded!! -_O

OPTIONS:
   -h|--help		Show this message
   --install		Downloads and installs yarrfiles
   -init		Install yarrfiles
   --update		Update yarrfiles via git
   --load-dotfiles	Copy over enabled dotfiles
   --revert-dotfiles	Reverts back to original dotfiles
   --uninstall		Uninstall yarrfiles

USAGE
}

# installs yarrf
install_yarrfiles() {
	echo "Installing Yarrfiles!"
	echo
	
	if [ -d $YARRF ] && [ $FORCE == "0" ]; then
	    echo "Yarrfiles is already installed. You'll need to remove ${YARRF} if you'd like to reinstall."
	    exit
	fi

	# If this is coming from a curl or wget
	if [ $RAW -eq 1 ]; then
		download_yarrf_from_git_repo
	fi

	echo "Looking for an existing ~/.$CURRENT_SHELL_CONFIG config..."
	if [ -f ~/.$CURRENT_SHELL_CONFIG ] || [ -h ~/.$CURRENT_SHELL_CONFIG ]; then
	    echo "Found ~/.${CURRENT_SHELL_CONFIG} —— Backing up to ~/.${CURRENT_SHELL_CONFIG}.pre-yarrfiles"
		mv ~/.${CURRENT_SHELL_CONFIG} ~/.${CURRENT_SHELL_CONFIG}.pre-yarrfiles
	fi

	echo "Using ~/.yarrfiles/templates/.${CURRENT_SHELL_CONFIG} config —— adding it to ~/.${CURRENT_SHELL_CONFIG}"
	cp ~/.yarrfiles/templates/$CURRENT_SHELL_CONFIG ~/.$CURRENT_SHELL_CONFIG
	
	echo "Copying your current PATH and adding it to the end of ~/.${CURRENT_SHELL_CONFIG} for you."
	echo "export PATH=${PATH}:${YARRF}/bin:${YARRF}/custom/bin" >> ~/.${CURRENT_SHELL_CONFIG}

	# bash_profile updates
	if [ $CURRENT_SHELL == 'bash' ]; then
		echo "Sourcing ~/.bashrc in ~/.bash_profile"
		echo "source ~/.bashrc" >> ~/.bash_profile
	fi

	if [ $RAW -eq 0 ]; then
		load_dotfiles
	fi

	cd $CWD

	echo
	echo "Ye scury dog, installation successful! (-_O)"
	echo

	source ~/.$CURRENT_SHELL_CONFIG
}

download_yarrf_from_git_repo() {
	echo "Cloning Yarrfiles..."
	hash git >/dev/null && /usr/bin/env git clone git@github.com:ptahdunbar/yarrfiles.git $YARRF || {
	   echo "git is not installed. installation failed."
	   exit
	}

	# Init submodules.
	cd $YARRF && git submodule init && git submodule foreach git pull origin master
}

# TODO Refactor function
uninstall_yarrfiles() {
	echo "Removing ${YARRF}"

	read -p "Are you sure you want to continue? (y|N) "
	[ "$REPLY" != "y" ] && echo "Aborting..."; exit
	
	if [[ -d $YARRF ]]; then
	  rm -rf $YARRF
	fi

	echo "Looking for original zsh config..."
	if [ -f ~/.zshrc.pre-yarrfiles ] || [ -h ~/.zshrc.pre-yarrfiles ]
	then
		echo "Found ~/.zshrc.pre-yarrfiles -- Restoring to ~/.zshrc";
		if [ -f ~/.zshrc ] || [ -h ~/.zshrc ]
		then
			ZSHRC_SAVE=".zshrc.yarrfiles-uninstalled-`date +%Y%m%d%H%M%S`";
			echo "Found ~/.zshrc -- Renaming to ~/${ZSHRC_SAVE}";
			mv ~/.zshrc ~/${ZSHRC_SAVE};
		fi
	fi
	
	if [ -f ~/.zshrc.pre-yarrfiles ] || [ -h ~/.zshrc.pre-yarrfiles ]
	then
		mv ~/.zshrc.pre-yarrfiles ~/.zshrc;
	fi
	
	echo "Looking for original bash config..."
	if [ -f ~/.bashrc.pre-yarrfiles ] || [ -h ~/.bashrc.pre-yarrfiles ]
	then
		echo "Found ~/.bashrc.pre-yarrfiles -- Restoring to ~/.bashrc";
		if [ -f ~/.bashrc ] || [ -h ~/.bashrc ]
		then
			BASHRC_SAVE=".bashrc.yarrfiles-uninstalled-`date +%Y%m%d%H%M%S`";
			echo "Found ~/.bashrc -- Renaming to ~/${BASHRC_SAVE}";
			mv ~/.bashrc ~/${BASHRC_SAVE};
		fi
	fi
	
	if [ -f ~/.bashrc.pre-yarrfiles ] || [ -h ~/.bashrc.pre-yarrfiles ]
	then
		mv ~/.bashrc.pre-yarrfiles ~/.bashrc;
	fi

	revert_dotfiles

	echo "Thanks for trying out Yarrfiles. It's been uninstalled."
}

update_yarrfiles() {
	echo "Updating Yarrfiles!"

	cd $YARRF

	if git pull && git submodule foreach git pull origin master; then		
		echo
		echo "Yarr ye scury dog, update successful! (-_O)"
		echo
	else
		echo "Arrgh matey, update failed! :/"
	fi
	
	cd $CWD
}

load_dotfiles() {
	shopt -s dotglob
	shopt -s nullglob

	# load the dotfiles variable
	source ~/.$CURRENT_SHELL_CONFIG
	
	dotters=()

	# load all enabled dotfiles and attempt to copy them over to the home dir.
	for slug in "${dotfiles[@]}"; do
		if [[ -d $YARRF_CUSTOM/dotfiles/$slug ]]; then
			for dotter in $YARRF_CUSTOM/dotfiles/$slug/*; do
				dotters=($dotter $dotters)
			done
		elif [[ -d $YARRF/dotfiles/$slug ]]; then
			for dotter in $YARRF/dotfiles/$slug/*; do
				dotters=($dotter $dotters)
			done
		fi
	done
	
	for dotfile in ${dotters[@]}; do
		local base_slug=`basename $dotfile`
		if [[ -e ~/$base_slug ]]; then
			[[ $VERBOSE -eq 1 ]] && echo "[backup] ~/$base_slug to ~/$base_slug.bak-yarrfiles"
			cp -R ~/$base_slug ~/$base_slug.bak-yarrfiles
		fi
		
		local path=(${dotfile//.yarrfiles/ })

		[[ $VERBOSE -eq 1 ]] && echo "[loaded] ${path[1]}/$base_slug"

		cp -R $dotfile ~/
	done
}

revert_dotfiles() {
	shopt -s dotglob
	shopt -s nullglob

	dotfiles=(*.bak-yarrfiles)
	for restore in ${dotfiles[@]}; do
		local slug=(${restore//.bak-yarrfiles/ })
		local path=${slug[0]}
		[[ $VERBOSE -eq 1 ]] && echo "Restoring ${restore} to ~/$path"

		if [[ -f ~/$path ]]; then
			rm ~/$path
		elif [[ -d ~/$path ]]; then
			rmdir ~/$path
		fi

		mv -f $restore ~/$path
	done
}

while getopts ':hivdfuxr' OPTION
do
	case $OPTION in
		f|force)
			FORCE='1'
			;;
		v|verbose)
			VERBOSE='1'
			;;
		install)
			RAW='1'
			COMMAND='install_yarrfiles'
			;;
		init)
			COMMAND='install_yarrfiles'
			;;
		load-dotfiles)
			COMMAND='load_dotfiles'
			;;
		revert-dotfiles)
			COMMAND='revert_dotfiles'
			;;
		update)
		 	COMMAND='update_yarrfiles'
			;;
		uninstall)
			COMMAND='uninstall_yarrfiles'
			;;
     esac
done

$COMMAND

exit 1