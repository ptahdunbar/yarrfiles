#!/bin/sh

# set the directory of Yarrfiles.
YARRF=`echo /Users/$(whoami)/.yarrfiles`

# get the current working directory so we can switch back if nessecary.
CWD=`pwd`

# Get the current shell info
CURRENT_SHELL=`basename $SHELL`
CURRENT_SHELL_SUFFIX='rc'
CURRENT_SHELL_CONFIG="${CURRENT_SHELL}${CURRENT_SHELL_SUFFIX}"

TIMESTAMP=`date +%Y-%m-%d-%s`

# Default command to run.
COMMAND='usage'

# Command options
DOWNLOAD_YARRF='0' # Flag to determine whether to download yarrfiles upon installation/upgrade.
VERBOSE='0' # Display additional output when running a command.
FORCE='0' # Force a command to run.

usage()
{
	cat <<USAGE
usage: yarrfiles [OPTIONS]

Options
 -h			display this message
 -v			increase verbosity
 -f			force a command to run
 -s			downloads yarrfiles and performs the install routine
 -i			performs the install routine
 -l			symlinks dotfiles to home dir
 -d			deletes yarrfiles

USAGE
}

# installs yarrf
install_yarrfiles() {
	echo "Installing Yarrfiles!"
	echo

	# If this is coming from a curl or wget
	if [[ $DOWNLOAD_YARRF -eq 1 ]]; then

		if [[ -d $YARRF ]]; then
		    echo "Yarrfiles is already installed. You'll need to remove ${YARRF} if you'd like to reinstall."
		    exit
		fi

		download_yarrf_from_git_repo
	fi

	if [[ -f ~/.$CURRENT_SHELL_CONFIG ]] || [[ -h ~/.$CURRENT_SHELL_CONFIG ]]; then
	    echo "Found existing ~/.${CURRENT_SHELL_CONFIG} —— Backing up to ~/.${CURRENT_SHELL_CONFIG}.pre-yarrfiles"
		mv ~/.${CURRENT_SHELL_CONFIG} ~/.${CURRENT_SHELL_CONFIG}.pre-yarrfiles
	fi

	echo "Using ~/.yarrfiles/templates/.${CURRENT_SHELL_CONFIG} —— adding to ~/.${CURRENT_SHELL_CONFIG}"
	cp ~/.yarrfiles/templates/$CURRENT_SHELL_CONFIG ~/.$CURRENT_SHELL_CONFIG

	PATH=$(printf '%s\n' $PATH | sort -u)
	
	echo "Copying your current PATH and adding it to the end of ~/.${CURRENT_SHELL_CONFIG} for you."
	echo "export PATH=${PATH}:${YARRF}/bin:${YARRF}/custom/bin" >> ~/.${CURRENT_SHELL_CONFIG}

	# bash_profile updates
	if [[ $CURRENT_SHELL == 'bash' ]]; then
		echo "Sourcing ~/.bashrc in ~/.bash_profile"
		echo "[ -e ~/.bashrc ] && source ~/.bashrc" >> ~/.bash_profile
	fi

	cd $CWD

	echo
	echo "Ye scury dog, installation successful! (-_O)"
	echo

	load_dotfiles
}

download_yarrf_from_git_repo() {
	echo "Cloning Yarrfiles..."
	hash git >/dev/null && /usr/bin/env git clone git@github.com:ptahdunbar/yarrfiles.git $YARRF || {
	   echo "git is not installed. installation failed."
	   exit
	}

	# Init submodules.
	cd $YARRF && git submodule init && git submodule foreach git pull origin master
}

# TODO Refactor function
uninstall_yarrfiles() {
	echo "Removing ${YARRF}"

	read -p "Are you sure you want to continue? (y|N) "
	[[ $REPLY != 'y' ]] && echo "Aborting..."; exit
	
	if [[ -d $YARRF ]]; then
	  rm -rf $YARRF
	fi

	echo "Looking for original zsh config..."
	if [ -f ~/.zshrc.pre-yarrfiles ] || [ -h ~/.zshrc.pre-yarrfiles ]
	then
		echo "Found ~/.zshrc.pre-yarrfiles -- Restoring to ~/.zshrc";
		if [ -f ~/.zshrc ] || [ -h ~/.zshrc ]
		then
			ZSHRC_SAVE=".zshrc.yarrfiles-uninstalled-`date +%Y%m%d%H%M%S`";
			echo "Found ~/.zshrc -- Renaming to ~/${ZSHRC_SAVE}";
			mv ~/.zshrc ~/${ZSHRC_SAVE};
		fi
	fi
	
	if [ -f ~/.zshrc.pre-yarrfiles ] || [ -h ~/.zshrc.pre-yarrfiles ]
	then
		mv ~/.zshrc.pre-yarrfiles ~/.zshrc;
	fi
	
	echo "Looking for original bash config..."
	if [ -f ~/.bashrc.pre-yarrfiles ] || [ -h ~/.bashrc.pre-yarrfiles ]
	then
		echo "Found ~/.bashrc.pre-yarrfiles -- Restoring to ~/.bashrc";
		if [ -f ~/.bashrc ] || [ -h ~/.bashrc ]
		then
			BASHRC_SAVE=".bashrc.yarrfiles-uninstalled-`date +%Y%m%d%H%M%S`";
			echo "Found ~/.bashrc -- Renaming to ~/${BASHRC_SAVE}";
			mv ~/.bashrc ~/${BASHRC_SAVE};
		fi
	fi
	
	if [ -f ~/.bashrc.pre-yarrfiles ] || [ -h ~/.bashrc.pre-yarrfiles ]
	then
		mv ~/.bashrc.pre-yarrfiles ~/.bashrc;
	fi

	revert_dotfiles

	echo "Thanks for trying out Yarrfiles. It's been uninstalled."
}

upgrade_yarrfiles() {
	echo "Updating Yarrfiles!"

	cd $YARRF

	if git pull && git submodule foreach git pull origin master; then		
		echo
		echo "Yarr ye scury dog, update successful! (-_O)"
		echo
	else
		echo "Arrgh matey, update failed! :/"
	fi
	
	cd $CWD
}

load_dotfiles() {
	shopt -s dotglob
	shopt -s nullglob

	# load the dotfiles variable
	source ~/.$CURRENT_SHELL_CONFIG

	dotters=()
	
	[[ $VERBOSE -eq 1 ]] && [[ ${dotfiles[@]} == '' ]] && echo "No plugins enabled."

	# load all enabled dotfiles and attempt to copy them over to the home dir.
	for slug in "${dotfiles[@]}"; do
		if [[ -d $YARRF_CUSTOM/dotfiles/$slug ]]; then
			for dotter in $YARRF_CUSTOM/dotfiles/$slug/.*; do
				[[ ! -s $dotter ]] && dotters[$[${#dotters[@]}+1]]=$dotter
			done
		elif [[ -d $YARRF/dotfiles/$slug ]]; then
			for dotter in $YARRF/dotfiles/$slug/.*; do
				[[ ! -s $dotter ]] && dotters[$[${#dotters[@]}+1]]=$dotter
			done
		fi
	done

	for dotfile in ${dotters[@]}; do
		[[ -s $dotfile ]] && continue 

		base_slug=`basename $dotfile`
		path=(${dotfile//.yarrfiles/ })
		[[ -d $dotfile ]] && dotfile="$dotfile/" && base_slug="$base_slug"

		if [[ -e ~/$base_slug ]]; then
			[[ $VERBOSE -eq 1 ]] && echo "Moved ~/$base_slug to ~/$base_slug.dotbak-yarrfiles.$TIMESTAMP"
			mv -f ~/$base_slug ~/$base_slug.dotbak-yarrfiles.$TIMESTAMP
		fi

		if [[ $VERBOSE -eq 1 ]]; then
			test -f $dotfile && echo "[symlink] ${path[1]}/$base_slug" || echo "[symlink] ${path[1]}"
		fi

		ln -s $dotfile ~/$base_slug
	done
}

revert_dotfiles() {
	shopt -s dotglob
	shopt -s nullglob

	dotfiles=(*.dotbak-yarrfiles.*)
	for restore in ${dotfiles[@]}; do
		local slug=(${restore//.dotbak-yarrfiles/ })
		local path=${slug[0]}
		[[ $VERBOSE -eq 1 ]] && echo "Restoring ${restore} to ~/$path"

		unlink ~/$path

		mv $restore ~/$path
	done
}

while getopts ':hvfsiudl' OPTION; do
	case "$OPTION" in
		f|force)
			FORCE='1'
			;;
		v|verbose)
			VERBOSE='1'
			;;
		s|setup)
			DOWNLOAD_YARRF='1'
			COMMAND='install_yar`rfiles'
			;;
		i|init)
			COMMAND='install_yarrfiles'
			;;
		l|load-dotfiles)
			COMMAND='load_dotfiles'
			;;
		u|upgrade)
		 	COMMAND='upgrade_yarrfiles'
			;;
		d|delete)
			COMMAND='uninstall_yarrfiles'
			;;
     esac
done

$COMMAND

exit 0

# TODO
# build a function that parses params and outputs: $COMMAND $ARGS

# uninstall, but dont delete yarrfiles?

# install with presets
# yarrfiles -i -p foo,bar,baz -d vim,tmux

# source a plugin (in current session only)
# enable -p slug

# copy over a dotfile (in current session only)
# enable -d slug

# removes a dotfile (in current session only)
# disable -d slug
