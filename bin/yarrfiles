#!/bin/sh

# set the directory of Yarrfiles.
YARRF='~/.yarrfiles'

# get the current working directory so we can switch back if nessecary.
CWD=`pwd`

# Flag to determine what type of install were performing.
RAW='0'

# installs yarrf
install() {
	echo
	echo "Installing Yarrfiles!"
	echo
	
	csh=`basename $SHELL`
	suffix='rc'
	cshrc="${csh}${suffix}"

	if [ -d $YARRF ]; then
	    echo "Yarrfiles is already installed. You'll need to remove ~/${YARRF} if you'd like to install."
	    exit
	fi
	
	# If this is coming from a curl or wget
	if [ $RAW -eq 1 ]; then
		download_repo
	fi

	echo "Looking for an existing ~/.$cshrc config..."
	if [ -f ~/.$cshrc ] || [ -h ~/.$cshrc ]; then
	    echo "Found: ~/.${cshrc} —— Backing up to ~/.${cshrc}.pre-yarrfiles"
		mv ~/.${cshrc} ~/.${cshrc}.pre-yarrfiles
	fi

	echo "Using: ~/.yarrfiles/templates/.${cshrc} config —— adding it to ~/.${cshrc}"
	cp ~/.yarrfiles/templates/$cshrc ~/.$cshrc

	# if bash_profile exists, cat 'source bashrc'.
	if [ $csh == 'bash' ]; then
		if [ -f ~/.bash_profile ] || [ -h ~/.bash_profile ]; then
			echo "Sourcing ~/.bashrc in ~/.bash_profile"
		    echo "source ~/.bashrc" >> bash_profile
			cat "source ~/.bashrc" >> bash_profile
		fi
	fi
	
	cd $CWD
	
	echo
	echo "Ye scury dog, installation successful! (-_O)"
	echo

	source ~/.$cshrc
}

download_repo() {
	echo "Cloning Yarrfiles..."
	hash git >/dev/null && /usr/bin/env git clone git@github.com:ptahdunbar/yarrfiles.git $YARRF || {
	   echo "git is not installed. installation failed."
	   exit
	}

	# Init submodules.
	cd $YARRF && git submodule init && git submodule foreach git pull origin master
}

uninstall() {
	echo
	echo "Removing ${YARRF}"
	echo
	
	if [[ -d $YARRF ]]; then
	  rm -rf $YARRF
	fi

	echo "Looking for original zsh config..."
	if [ -f ~/.zshrc.pre-yarrfiles ] || [ -h ~/.zshrc.pre-yarrfiles ]
	then
		echo "Found ~/.zshrc.pre-yarrfiles -- Restoring to ~/.zshrc";
		if [ -f ~/.zshrc ] || [ -h ~/.zshrc ]
		then
			ZSHRC_SAVE=".zshrc.yarrfiles-uninstalled-`date +%Y%m%d%H%M%S`";
			echo "Found ~/.zshrc -- Renaming to ~/${ZSHRC_SAVE}";
			mv ~/.zshrc ~/${ZSHRC_SAVE};
		fi
	fi
	
	if [ -f ~/.zshrc.pre-yarrfiles ] || [ -h ~/.zshrc.pre-yarrfiles ]
	then
		mv ~/.zshrc.pre-yarrfiles ~/.zshrc;
	fi
	
	echo "Looking for original bash config..."
	if [ -f ~/.bashrc.pre-yarrfiles ] || [ -h ~/.bashrc.pre-yarrfiles ]
	then
		echo "Found ~/.bashrc.pre-yarrfiles -- Restoring to ~/.bashrc";
		if [ -f ~/.bashrc ] || [ -h ~/.bashrc ]
		then
			BASHRC_SAVE=".bashrc.yarrfiles-uninstalled-`date +%Y%m%d%H%M%S`";
			echo "Found ~/.bashrc -- Renaming to ~/${BASHRC_SAVE}";
			mv ~/.bashrc ~/${BASHRC_SAVE};
		fi
	fi
	
	if [ -f ~/.bashrc.pre-yarrfiles ] || [ -h ~/.bashrc.pre-yarrfiles ]
	then
		mv ~/.bashrc.pre-yarrfiles ~/.zshrc;
	fi

	echo "Thanks for trying out Yarrfiles. It's been uninstalled."
}

update() {
	echo
	echo "Updating Yarrfiles!"
	echo

	cd $YARRF

	if git pull && git submodule foreach git pull origin master; then
		echo
		echo "Yarr ye scury dog, update successful! (-_O)"
		echo
	else
		echo "Arrgh matey, update failed! :/"
	fi
	
	cd $CWD
}

# displays loaded scripts and plugins.
status() {
	echo "Status: command not yet implemented."
}

usage()
{
	echo "Usage: $0 --install|--update|--status|--uninstall|--usage"
}

case "$1" in
--install)
	RAW='1'
	install
	;;
--init)
	install
	;;
--update)
	update
	;;
--status)
	status
	;;
--uninstall)
	uninstall
	;;
*)
	usage
	exit 1
esac
